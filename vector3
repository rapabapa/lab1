/*
 * An "object" representing a 3d vector to make operations simple and concise.
 *
 * Similar to how we work with plain numbers, we will work with vectors as
 * an entity unto itself.  Note the syntax below: var Vector3 = function...
 * This is different than you might be used to in most programming languages.
 * Here, the function is meant to be instantiated rather than called and the
 * instantiation process IS similar to other object oriented languages => new Vector3()
 */

var Vector3 = function(x, y, z) {
  this.x = x || 0; this.y = y || 0; this.z = z || 0;

  // Sanity check to prevent accidentally using this as a normal function call
  if (!(this instanceof Vector3)) {
    console.error("Vector3 constructor must be called with the new operator");
  }

  // todo - make sure to set a default value in case x, y, or z is not passed in

  this.set = function(x, y, z) {
    this.x = x;
    this.y = y; 
    this.z = z;
    // todo set 'this' object's values to those from x, y, and z
    return this;
  }

  this.clone = function() {
    return new Vector3(this.x, this.y, this.z);
  };

  this.copy = function(other) {
    // copy the values from other into 'this'
    this.x = other.x;
    this.y = other.y;
    this.z = other.z;
    return this;
  }

  this.add = function(v) {
if (v instanceof Vector3) {
  this.x += v.x;
  this.y += v.y;
  this.z += v.z;
}
else
{
  this.x += x;
  this.y += y;
  this.z += z;
}
    // todo - add v to 'this' vector
    // This SHOULD change the values of this.x, this.y, and this.z
    return this;
  };

  this.subtract = function(v) {
    if (v instanceof Vector3) {
      this.x -= v.x;
      this.y -= v.y;
      this.z -= v.z;
    }
    else
    {
      this.x -= x;
      this.y -= y;
      this.z -= z;
    }
    // todo - subtract v from 'this' vector
    // This SHOULD change the values of this.x, this.y, and this.z
    return this;
  };

  this.negate = function() {
    this.x = -1 * this.x;
    this.y = -1 * this.y;
    this.z = -1 * this.z;
    // multiply 'this' vector by -1
    // This SHOULD change the values of this.x, this.y, and this.z
    return this;
  };

  this.multiplyScalar = function(scalar) {
    this.x *= scalar;
    this.y *= scalar;
    this.z *= scalar;
    // multiply 'this' vector by "scalar"
    // This SHOULD change the values of this.x, this.y, and this.z
    return this;
  };

  this.length = function() {
    // todo - return the magnitude (A.K.A. length) of 'this' vector
    // This should NOT change the values of this.x, this.y, and this.z
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z* this.z);
  };

  this.lengthSqr = function() {
    // todo - return the squared magnitude of this vector ||v||^2
    // This should NOT change the values of this.x, this.y, and this.z
    return (this.x * this.x + this.y * this.y + this.z * this.z);
  };

  this.normalized = function() {
    // todo - return a new vector instance that is a normalized clone of 'this' vector
    // This should NOT change the values of this.x, this.y, and this.z
    return null; // Should return a new vector that is not this
  };

  this.normalize = function() {
    // todo - Change the components of this vector so that its magnitude will equal 1.
    // This SHOULD change the values of this.x, this.y, and this.z
    var mag = this.length();
    if (mag > 0) {
      this.multiplyScalar(1 / mag);
    }
    return this;
  };

  this.dot = function(other) {
    // todo - return the dot product betweent this vector and "other"
    // This should NOT change the values of this.x, this.y, and this.z
    return this.x * other.x + this.y * other.y + this.z * other.z;
  };
};
